---
- name: Copy database install file to installer directory
  when: inventory_hostname == ansible_play_hosts_all[0]
  ansible.builtin.copy:
    src: "/home/admin/Downloads/{{ installer_archives[1] }}"
    dest: '{{ installer_dir }}'
  become: true
  become_user: '{{ oracle_user }}'
  tags:
    - copy_db_install_file

- name: Copy DB RU 19.8 file to installer directory
  when: inventory_hostname == ansible_play_hosts_all[0]
  ansible.builtin.copy:
    src: "/home/admin/Downloads/{{ installer_archives[4] }}"
    dest: '{{ installer_dir }}'
  become: true
  become_user: '{{ oracle_user }}'
  tags:
    - copy_db_ru_file

# Setup Oracle user environment for database installation
- name: Create Oracle base directory
  file:
    state: directory
    path: '{{ oracle_base }}'
    owner: '{{ oracle_user }}'
    group: '{{ oracle_install_group }}'
  become: true
  tags:
    - cre_oracle_base

- name: Generate OpenSSH rsa key pair with default values for oracle user
  shell: ssh-keygen -b 2048 -t rsa -f /home/oracle/.ssh/id_rsa -q -N ""
  args:
    creates: /home/oracle/.ssh/id_rsa
  become: true
  become_user: '{{ oracle_user }}'
  tags:
    - gen_ssh_oracle

- name: Fetch all public ssh keys
  shell: cat ~/.ssh/id_rsa.pub
  become: true
  become_user: '{{ oracle_user }}'
  register: oracle_ssh_keys
  tags:
    - deploy_ssh_keys_oracle

- name: Check keys
  debug:
    msg: '{{ oracle_ssh_keys.stdout }}'
  tags:
    - deploy_ssh_keys_oracle

- name: Deploy keys on all rac nodes
  authorized_key:
    user: '{{ oracle_user }}'
    key: "{{ hostvars[item]['oracle_ssh_keys']['stdout'] }}"
  become: true
  with_items:
    - "{{ ansible_play_hosts_all }}"
  tags:
   - deploy_ssh_keys_oracle

- name: Disable StrictHostKeyChecking
  template:
    src: "ssh.config"
    dest: "/home/oracle/.ssh/config"
    owner: '{{ oracle_user }}'
    group: '{{ oracle_install_group }}'
    mode: '0644'
  become: true
  tags:
    - disable_StrictHostKeyChecking_oracle

- name: Login to remote hosts and local to generate host keys
  shell: "ssh {{ item }} date"
  with_items:
    - "{{ groups['oracle'] }}"
  become: true
  become_user: '{{ oracle_user }}'
  tags:
    - gen_hosts_keys_oracle

- name: Create folder for oracle database home
  file:
    state: directory
    path: '{{ installation_folder }}'
    owner: '{{ oracle_user }}'
    group: '{{ oracle_install_group }}'
  become: true
  tags:
    - cre_oracle_home

- name: Unpack database installer files - 19c
  when: ora_version == "19c" and inventory_hostname == ansible_play_hosts_all[0]
  ansible.builtin.unarchive:
    src: "{{ installer_dir }}/{{ installer_archives[1] }}"
    dest: "{{ installation_folder }}/"
    remote_src: yes
  become: true
  become_user: '{{ oracle_user }}'
  tags:
    - unzip_db_install_files

- name: Delete existing OPatch directory in oracle home
  when: inventory_hostname == ansible_play_hosts_all[0] and ora_version == "19c"
  ansible.builtin.file:
    path: "{{ oracle_home }}/OPatch"
    state: absent
  become: true
  become_user: '{{ oracle_user }}'
  tags:
    - del_exist_opatch_ohome

- name: Extract current version of OPatch files - p6880880
  when: inventory_hostname == ansible_play_hosts_all[0] and ora_version == "19c"
  ansible.builtin.unarchive:
    src: "{{ installer_dir }}/{{ installer_archives[5] }}"
    dest: "{{ oracle_home }}/"
    remote_src: yes
  become: true
  become_user: '{{ oracle_user }}'
  tags:
    - unzip_opatch_file_oracle

- name: Unpack DB 19.8 RU patch files
  when: inventory_hostname == ansible_play_hosts_all[0] and ora_version == "19c"
  ansible.builtin.unarchive:
    src: "{{ installer_dir }}/{{ installer_archives[4] }}"
    dest: "{{ installer_dir }}/"
    remote_src: yes
  become: true
  become_user: '{{ oracle_user }}'
  tags:
    - unzip_oracle_ru_file

- name: Generate the response file for software only installation
  when: inventory_hostname == ansible_play_hosts_all[0]
  template:
    src: "db_install.rac.rsp.{{ ora_version }}"
    dest: "{{ installation_folder }}/db_install.rsp"
    mode: '0600'
  become: true
  become_user: '{{ oracle_user }}'
  tags:
    - gen_db_install_rsp

- name: Set ASSUME_DISTID to OL7
  when: inventory_hostname == ansible_play_hosts_all[0]
  ansible.builtin.replace:
    path: "{{ oracle_home }}/cv/admin/cvu_config"
    regexp: '#CV_ASSUME_DISTID=OEL5'
    replace: 'CV_ASSUME_DISTID=OL7'
  become: true
  become_user: '{{ oracle_user }}'
  tags:
    - set_assume_distid_oracle

- name: Set ORACLE_SRVM_REMOTECOPY to /tmp/archive/scp
  when: inventory_hostname == ansible_play_hosts_all[0]
  ansible.builtin.replace:
    path: "{{ oracle_home }}/cv/admin/cvu_config"
    regexp: '#ORACLE_SRVM_REMOTECOPY=/usr/bin/scp'
    replace: 'ORACLE_SRVM_REMOTECOPY=/tmp/archive/scp'
  become: true
  become_user: '{{ oracle_user }}'
  tags:
    - set_ORACLE_SRVM_REMOTECOPY_oracle

- name: Install oracle 19c software only 
  when: ora_version == "19c" and inventory_hostname == ansible_play_hosts_all[0]
  command: "{{ installation_folder}}/runInstaller -applyRU {{db_patch}} -silent -ignorePrereqFailure -responseFile {{ installation_folder }}/db_install.rsp"
  become: true
  become_user: '{{ oracle_user }}'
  ignore_errors: yes
  tags:
    - install_db_software_only

- name: Execute DB home root command on nodes
  command: "{{ oracle_home }}/root.sh"
  become: true
  tags:
    - run_root.sh.software_only

